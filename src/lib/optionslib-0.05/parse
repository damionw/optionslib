#!/usr/bin/env bash

first_name="${BASH_SOURCE[0]}"
actual_name="$(readlink -f "${first_name}")"
local_path="$(dirname "${actual_name}")"

optionslib::parse::options_defaults() {
    echo "long_options= short_options= action=store_var name= description= required=false"
}

optionslib::parse::description() {
    if [ -n "${1}" ]
    then
        export __OPTIONSLIB__DESCRIPTION__"=${1}"
    elif [ -n "${__OPTIONSLIB__DESCRIPTION__}" ]
    then
        echo "${__OPTIONSLIB__DESCRIPTION__}"
    else
        echo "Undefined command"
    fi
}

optionslib::parse::extra_arguments() {
    if [ -n "${1}" ]
    then
        export __OPTIONSLIB__EXTRAS__"=${1}"
    elif [ -n "${__OPTIONSLIB__EXTRAS__}" ]
    then
        echo "${__OPTIONSLIB__EXTRAS__}"
    fi
}

optionslib::parse::config() {
    if [ -n "${1}" ]
    then
        export __OPTIONSLIB__CONFIG__"=${1}"
    elif [ -n "${__OPTIONSLIB__CONFIG__}" ]
    then
        echo "${__OPTIONSLIB__CONFIG__}"
    else
        echo "Command line options have not been defined" >&2
    fi
}

optionslib::parse::show_help() {
    local _long_options _short_options

    if ! _long_options="$(optionslib::parse::get_long_options)"
    then
        return 123
    fi

    local _synopsis="
        $(optionslib::parse::description)
    "

    local _key _value

    local -A _keywords=()

    while read _key _value
    do
        _keywords["${_key}"]="${_value}"
    done <<< "$(optionslib::parse::get_help_keywords)"

    local _terms="$(echo "${_long_options}" | awk -F, '{for (i=1; i <= NF; ++i) {print $i;}}')"
    local _topic

    local _contents="$(
        echo "${_terms}" | awk -F: '{printf("%s[--%s%s]", sep, $1, (NF == 2 ? sprintf("=<%s>", $1) : "")); sep=" "}'
        echo -en "${_synopsis:+\n\n}"
        echo "${_synopsis}" | sed -e 's/^[ ]*//g' -e '/^[ ]*$/d'

        echo "${_terms}" | {
            _prefix="\n"

            while read _topic
            do
                if [ -n "${_keywords["${_topic}"]}" ]
                then
                    _fill="$(for ((i=$(echo -n "${_topic}" | wc -c); i < 15; ++i)); do echo -n " "; done)"
                    echo -e "${_prefix}--${_topic}${_fill}${_keywords["${_topic}"]}" | sed -e 's/^./    &/g'
                    _prefix=""
                fi
            done
        }
    )"

    echo "Usage: $0 ${_contents}" >&2
}

optionslib::parse::get_help_keywords() {
    local _config
    local _flag

    if ! _config="$(optionslib::parse::config)"
    then
        return 155
    fi

    while read _row
    do

        if [ -z "${_row}" ]
        then
            continue
        elif ! eval "$(optionslib::parse::options_defaults) ${_row}"
        then
            continue
        elif [ -z "${short_options}" -a -z "${long_options}" ]
        then
            continue
        fi

        while read _flag
        do
            echo "${_flag} ${description}"
        done <<< "$(echo "${short_options},${long_options}" | awk -F, '{for (i=1; i <= NF; ++i) {print $i;}}' | sed -e 's/^--//g')"
    done <<< "${_config}"
}

optionslib::parse::get_long_options() {
    local _config
    local _row

    if ! _config="$(optionslib::parse::config)"
    then
        return 155
    fi

    echo "${_config}" | while read _row
    do
        if [ -n "${_row}" ]
        then
            (eval "${_row}" && echo "${long_options}" | awk -F, '{for (i=1; i <= NF; ++i) {print $i;}}')
        fi
    done |
    sed -e 's/^--//g' |
    awk '{printf("%s%s", sep, $1); sep=",";}' sep=
}

optionslib::parse::get_short_options() {
    local _config
    local _row

    if ! _config="$(optionslib::parse::config)"
    then
        return 155
    fi

    # We expect the short options to be provided as -h or -v separated by commas
    echo "${_config}" | while read _row
    do
        if [ -n "${_row}" ]
        then
            (eval "${_row}" && echo "${short_options}" | awk -F, '{for (i=1; i <= NF; ++i) {print $i;}}')
        fi
    done |
    sed -e 's/^-//g' |
    awk '{printf("%s", substr($1, 1, 1));}'
}

optionslib::parse::get_required_options() {
    local _config
    local _row

    if ! _config="$(optionslib::parse::config)"
    then
        return 155
    fi

    # We expect the short options to be provided as -h or -v separated by commas
    echo "${_config}" | while read _row
    do
        if [ -n "${_row}" ]
        then
            (eval "${_row}" && test "${required:-false}" = true && echo "${long_options},${short_options}")
        fi
    done
}

optionslib::parse::find_option_details() {
    local _argument="${1}"
    local _config
    local _found
    local _row

    if ! _config="$(optionslib::parse::config)"
    then
        return 155
    fi

    # We expect the short options to be provided as -h or -v separated by commas
    while read _row
    do
        if [ -n "${_row}" ]
        then
            _found=$(
                (
                    eval "${_row}" &&
                    echo "${short_options}" | awk -F, '{for (i=1; i <= NF; ++i) {print $i;}}' &&
                    echo "${long_options}" | awk -F, '{for (i=1; i <= NF; ++i) {print $i;}}'
                ) | grep '^'"${1}"'[\:]*$'
            )

            if [ $? == 0 ]
            then
                if (echo "${_found}" | grep -q '[\:]')
                then
                    shift=2
                else
                    shift=1
                fi

                echo "${_row} shift=${shift}"
                return 0
            fi
        fi
    done <<< "${_config}"

    return 121
}

optionslib::parse::parse_arguments() {
    # Command line options provided in $@

    local _long_options _short_options

    if ! _long_options="$(optionslib::parse::get_long_options)"
    then
        return 123
    elif ! _short_options="$(optionslib::parse::get_short_options)"
    then
        return 124
    fi

    local -A _required_options=()
    local _key

    while read _key
    do
        [ -n "${_key}" ] && _required_options["${_key}"]="$(echo "${_key}" | awk -F, '{print $1;}')"
    done <<< "$(optionslib::parse::get_required_options)"

    #===================================================================================
    # NOTE: There is a bug in getopts where not specifying at least one short option
    #       will cause the first non option parameter to be discarded. Here, we just
    #       use -h (help)
    #===================================================================================
    OPTION_TEMP=$(getopt --options "${_short_options:-h}" --longoptions "${_long_options}" -- "$@")
    local _status=$?

    if [ $_status != 0 ]
    then
        echo -e "\nInvalid command line options ($status) [$@]\n" >&2
        optionslib::parse::show_help
        return $_status
    fi

    eval set -- "$OPTION_TEMP"

    while true
    do
        if [ "$1" = "--" ]
        then
            shift
            break
        fi

        local _details

        if ! _details="$(optionslib::parse::find_option_details "$1")"
        then
            action="show_help"
        else
            eval "$(optionslib::parse::options_defaults) ${_details}"
        fi

        local _value=

        if [ "${shift}" = 1 ]
        then
            _value=true
        else
            _value="${2}"
        fi

        # Satisfy required option
        unset _required_options["${long_options},${short_options}"]

        case "${action:-store_var}" in
            "store_var")
                name="${name:-$(echo "${long_options}" | sed -e 's/[\:]*,.*$//g' -e 's/^[\-]*//g')}"
                
                if [ -z "${_value}" ]
                then
                    eval echo "\$${name}"
                else
                    eval "${name}='${_value}'"
                fi
                ;;

            "show_help")
                optionslib::parse::show_help
                exit 0
                ;;

            "command")
                name="${name:-$(echo "${long_options}" | sed -e 's/[\:]*,.*$//g' -e 's/^[\-]*//g')}"
                "${name}" "${_value}" || return $?
                ;;
        esac

        shift ${shift:-1}
    done

    if [ "${#_required_options[@]}" -gt 0 ]
    then
        echo -e "\nRequired key(s) [${_required_options[@]}] have not been supplied\n" >&2
        optionslib::parse::show_help
        exit 1
    fi

    local _parameter _extras_name _index

    if _extras_name="$(optionslib::parse::extra_arguments)" && test -n "${_extras_name}"
    then
        for _parameter in "$@"
        do
            _index=$(eval echo '${#'"${_extras_name}"'[@]}')
            eval "${_extras_name}"'['"${_index}"']='"$_parameter"
        done
    fi
}
